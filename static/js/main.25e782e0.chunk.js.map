{"version":3,"sources":["gameState/types.ts","PurchasableCard.tsx","gameState/stateUpdators/purchaseUpdators/utils.ts","gameState/stateUpdators/purchaseUpdators/incrementPurchasableQuantity.ts","gameState/stateUpdators/purchaseUpdators/lockPurchasableIfItNeedsIt.ts","gameState/stateUpdators/purchaseUpdators/spendPower.ts","gameState/stateUpdators/purchaseUpdators/unlockOtherPurchasablesIfNecessary.ts","gameState/stateUpdators/purchaseUpdators/updatePurchasableOutfluxPerSecond.ts","gameState/stateUpdators/purchaseUpdators/updatePurchasableNextCost.ts","gameState/stateUpdators/purchaseUpdators/updateTotalInfluxPerSecond.ts","gameState/stateUpdators/purchaseUpdators/handleRebirthIfNecessary.ts","gameState/stateUpdators/purchaseUpdators/handleEndIfNecessary.ts","gameState/stateUpdators/purchaseUpdator.ts","gameState/stateUpdators/tickUpdator.ts","gameState/reducer.ts","gameState/useGameState.ts","gameState/initialGameState.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["PurchasableType","PurchasableCard","purchasable","onPurchase","disableButton","buttonColor","type","Generator","Card","Body","Title","name","Subtitle","className","isPurchased","description","Text","quantity","outfluxPerSecond","Math","floor","ProgressBar","striped","animated","variant","now","hidePurchaseButton","Button","onClick","disabled","ctaText","nextCost","updateStateInPayload","payload","updator","state","updatePurchasableInPayload","purchasables","map","p","id","incrementPurchasableQuantity","lockPurchasableIfItNeedsIt","isUnlocked","Oneshot","spendPower","power","unlockOtherPurchasablesIfNecessary","updateOtherPurchasablesInPayload","unlockConditions","purchasableId","updatePurchasableOutfluxPerSecond","multiplier","baseProductivityPerSecond","updatePurchasableNextCost","baseCost","costCoefficient","updateTotalInfluxPerSecond","sumReducer","accumulator","next","influxPerSecond","powerRebirthMultiplier","reduce","handleRebirthIfNecessary","rebirthCount","index","baseCostRebirthMultiplier","handleEndIfNecessary","isGameOver","purchaseUpdator","lastPayload","transformer","tickUpdator","tickSpeed","reducer","action","Error","useGameState","initialGameState","useReducer","gameState","dispatch","useInterval","isPurchasable","App","unlockedPurchasables","filter","Container","Jumbotron","Navbar","bg","sticky","CardColumns","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Helmet","charSet","rel","href","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.25e782e0.chunk.js","sourcesContent":["export enum PurchasableType {\n  Oneshot,\n  Generator,\n}\n\nexport interface UnlockConditions {\n  purchasableId: string;\n  quantity: number;\n}\n\nexport interface Purchasable {\n  id: string;\n  name: string;\n  type: PurchasableType;\n  description: string;\n  isUnlocked: boolean;\n  unlockConditions?: UnlockConditions;\n  isPurchased: boolean;\n  quantity: number;\n  outfluxPerSecond: number;\n  ctaText: string;\n  nextCost: number;\n  baseCost: number;\n  baseCostRebirthMultiplier: number;\n  costCoefficient: number;\n  baseProductivityPerSecond: number;\n  hidePurchaseButton?: boolean;\n}\n\nexport interface GameState {\n  power: number;\n  powerRebirthMultiplier: number;\n  isGameOver: boolean;\n  rebirthCount: number;\n  tickSpeed: number;\n  influxPerSecond: number;\n  purchasables: Purchasable[];\n}\n\nexport interface GameStateAction {\n  type: string;\n  purchasable?: Purchasable;\n}\n\nexport interface PurchasableGameStateAction extends GameStateAction {\n  purchasable: Purchasable;\n}\n","import React from 'react';\nimport Button from 'react-bootstrap/esm/Button';\nimport Card from 'react-bootstrap/esm/Card';\nimport ProgressBar from 'react-bootstrap/esm/ProgressBar';\nimport { Purchasable, PurchasableType } from './gameState/types';\n\ninterface PurchasableCardProps {\n  purchasable: Purchasable;\n  onPurchase: (purchasable: Purchasable) => void;\n  disableButton?: boolean;\n}\n\nconst PurchasableCard: React.FunctionComponent<PurchasableCardProps> = ({\n  purchasable,\n  onPurchase,\n  disableButton,\n}) => {\n  const buttonColor =\n    purchasable.type === PurchasableType.Generator ? 'success' : 'info';\n\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>{purchasable.name}</Card.Title>\n        <Card.Subtitle\n          className={`${purchasable.isPurchased ? 'mb-2' : 'mb-4'} text-dark`}\n        >\n          {purchasable.description}\n        </Card.Subtitle>\n        {purchasable.isPurchased && (\n          <Card.Text>\n            <ul>\n              {purchasable.quantity > 0 && (\n                <li>\n                  <span className=\"text-uppercase font-weight-bold\">\n                    Quantity:\n                  </span>\n                  &nbsp;{purchasable.quantity}\n                </li>\n              )}\n              {purchasable.outfluxPerSecond > 0 && (\n                <li>\n                  <span className=\"text-uppercase font-weight-bold\">\n                    Outflux:\n                  </span>\n                  &nbsp;♅+{Math.floor(purchasable.outfluxPerSecond)}/s\n                </li>\n              )}\n            </ul>\n            <ProgressBar\n              striped\n              animated\n              variant=\"info\"\n              now={((purchasable.quantity % 25) / 25) * 100}\n              className=\"mb-4 bg-light\"\n            />\n          </Card.Text>\n        )}\n        {purchasable.hidePurchaseButton !== true && (\n          <Button\n            variant={disableButton ? 'dark' : buttonColor}\n            onClick={() => onPurchase(purchasable)}\n            disabled={disableButton}\n          >\n            {purchasable.ctaText}\n            {purchasable.nextCost > 0 &&\n              ` for ♅${Math.floor(purchasable.nextCost)}`}\n          </Button>\n        )}\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default PurchasableCard;\n","import { GameState, Purchasable } from '../../types';\nimport { Payload } from './types';\n\n// eslint-disable-next-line import/prefer-default-export\nexport const updateStateInPayload = (\n  payload: Payload,\n  updator: (state: GameState) => Partial<GameState>\n) => ({\n  ...payload,\n  state: {\n    ...payload.state,\n    ...updator(payload.state),\n  },\n});\n\nexport const updatePurchasableInPayload = (\n  payload: Payload,\n  updator: (purchasable: Purchasable) => Partial<Purchasable>\n) =>\n  updateStateInPayload(payload, (state) => ({\n    ...state,\n    purchasables: state.purchasables.map((p) =>\n      p.id === payload.purchasable.id ? { ...p, ...updator(p) } : p\n    ),\n  }));\n\nexport const updateOtherPurchasablesInPayload = (\n  payload: Payload,\n  updator: (purchasable: Purchasable) => Partial<Purchasable>\n) =>\n  updateStateInPayload(payload, (state) => ({\n    ...state,\n    purchasables: state.purchasables.map((p) =>\n      p.id !== payload.purchasable.id ? { ...p, ...updator(p) } : p\n    ),\n  }));\n","import { Payload, PayloadTransformer } from './types';\nimport { updatePurchasableInPayload } from './utils';\n\nconst incrementPurchasableQuantity: PayloadTransformer = (payload: Payload) => {\n  return updatePurchasableInPayload(payload, (purchasable) => ({\n    isPurchased: true,\n    quantity: purchasable.quantity + 1,\n  }));\n};\n\nexport default incrementPurchasableQuantity;\n","import { PurchasableType } from '../../types';\nimport { Payload, PayloadTransformer } from './types';\nimport { updatePurchasableInPayload } from './utils';\n\nconst lockPurchasableIfItNeedsIt: PayloadTransformer = (payload: Payload) => {\n  return updatePurchasableInPayload(payload, (purchasable) => ({\n    isUnlocked:\n      purchasable.type === PurchasableType.Oneshot\n        ? false\n        : purchasable.isUnlocked,\n  }));\n};\n\nexport default lockPurchasableIfItNeedsIt;\n","import { Payload, PayloadTransformer } from './types';\nimport { updateStateInPayload } from './utils';\n\nconst spendPower: PayloadTransformer = (payload: Payload) => {\n  const { purchasable } = payload;\n\n  return updateStateInPayload(payload, (state) => ({\n    ...state,\n    power: state.power - purchasable.nextCost,\n  }));\n};\n\nexport default spendPower;\n","import { Payload, PayloadTransformer } from './types';\nimport { updateOtherPurchasablesInPayload } from './utils';\n\nconst unlockOtherPurchasablesIfNecessary: PayloadTransformer = (\n  payload: Payload\n) =>\n  updateOtherPurchasablesInPayload(payload, (purchasable) => {\n    if (purchasable.isUnlocked || !purchasable.unlockConditions) {\n      return {};\n    }\n\n    return {\n      isUnlocked:\n        purchasable.unlockConditions.purchasableId === payload.purchasable.id &&\n        payload.purchasable.quantity + 1 >=\n          purchasable.unlockConditions.quantity,\n    };\n  });\n\nexport default unlockOtherPurchasablesIfNecessary;\n","import { Payload, PayloadTransformer } from './types';\nimport { updatePurchasableInPayload } from './utils';\n\nconst updatePurchasableOutfluxPerSecond: PayloadTransformer = (\n  payload: Payload\n) =>\n  updatePurchasableInPayload(payload, (purchasable) => {\n    const { quantity } = purchasable;\n    const multiplier = Math.floor(quantity / 25); // every 25 get a new one\n    const outfluxPerSecond =\n      purchasable.baseProductivityPerSecond * quantity * (1 + multiplier);\n\n    return {\n      outfluxPerSecond,\n    };\n  });\n\nexport default updatePurchasableOutfluxPerSecond;\n","import { Payload, PayloadTransformer } from './types';\nimport { updatePurchasableInPayload } from './utils';\n\nconst updatePurchasableNextCost: PayloadTransformer = (payload: Payload) =>\n  updatePurchasableInPayload(payload, (purchasable) => ({\n    nextCost:\n      purchasable.baseCost *\n      purchasable.costCoefficient ** purchasable.quantity,\n  }));\n\nexport default updatePurchasableNextCost;\n","import { Payload, PayloadTransformer } from './types';\nimport { updateStateInPayload } from './utils';\n\nconst updateTotalInfluxPerSecond: PayloadTransformer = (payload: Payload) => {\n  const sumReducer = (accumulator: number, next: number) => accumulator + next;\n\n  return updateStateInPayload(payload, (state) => ({\n    influxPerSecond:\n      state.powerRebirthMultiplier *\n      state.purchasables\n        .map((purchasable) => purchasable.outfluxPerSecond)\n        .reduce(sumReducer),\n  }));\n};\n\nexport default updateTotalInfluxPerSecond;\n","import { Payload, PayloadTransformer } from './types';\nimport { updateStateInPayload } from './utils';\n\nconst handleRebirthIfNecessary: PayloadTransformer = (payload: Payload) => {\n  if (payload.purchasable.id !== 'rebirth') {\n    return payload;\n  }\n\n  return updateStateInPayload(payload, (state) => ({\n    power: 5,\n    powerRebirthMultiplier: state.powerRebirthMultiplier * 2,\n    influxPerSecond: 0,\n    rebirthCount: state.rebirthCount + 1,\n    purchasables: state.purchasables.map((p, index) => ({\n      ...p,\n      isUnlocked: index === 0,\n      isPurchased: false,\n      quantity: 0,\n      outfluxPerSecond: 0,\n      baseCost: p.baseCost * p.baseCostRebirthMultiplier,\n      nextCost: p.baseCost * p.baseCostRebirthMultiplier,\n    })),\n  }));\n};\n\nexport default handleRebirthIfNecessary;\n","import { Payload, PayloadTransformer } from './types';\nimport { updateStateInPayload } from './utils';\n\nconst handleEndIfNecessary: PayloadTransformer = (payload: Payload) => {\n  if (payload.purchasable.id !== 'end1') {\n    return payload;\n  }\n\n  return updateStateInPayload(payload, (state) => ({\n    isGameOver: true,\n    purchasables: state.purchasables.map((p) => ({\n      ...p,\n      isUnlocked: false,\n    })),\n  }));\n};\n\nexport default handleEndIfNecessary;\n","import { GameState, Purchasable } from '../types';\nimport incrementPurchasableQuantity from './purchaseUpdators/incrementPurchasableQuantity';\nimport lockPurchasableIfItNeedsIt from './purchaseUpdators/lockPurchasableIfItNeedsIt';\nimport spendPower from './purchaseUpdators/spendPower';\nimport { Payload, PayloadTransformer } from './purchaseUpdators/types';\nimport unlockOtherPurchasablesIfNecessary from './purchaseUpdators/unlockOtherPurchasablesIfNecessary';\nimport updatePurchasableOutfluxPerSecond from './purchaseUpdators/updatePurchasableOutfluxPerSecond';\nimport updatePurchasableNextCost from './purchaseUpdators/updatePurchasableNextCost';\nimport updateTotalInfluxPerSecond from './purchaseUpdators/updateTotalInfluxPerSecond';\nimport handleRebirthIfNecessary from './purchaseUpdators/handleRebirthIfNecessary';\nimport handleEndIfNecessary from './purchaseUpdators/handleEndIfNecessary';\n\nconst purchaseUpdator = (state: GameState, purchasable: Purchasable) => {\n  const payload = {\n    state,\n    purchasable,\n  };\n\n  const fn = (lastPayload: Payload, transformer: PayloadTransformer) =>\n    transformer(lastPayload);\n\n  return [\n    handleEndIfNecessary,\n    spendPower,\n    lockPurchasableIfItNeedsIt,\n    incrementPurchasableQuantity,\n    updatePurchasableOutfluxPerSecond,\n    updatePurchasableNextCost,\n    unlockOtherPurchasablesIfNecessary,\n    updateTotalInfluxPerSecond,\n    handleRebirthIfNecessary,\n  ].reduce(fn, payload).state;\n};\n\nexport default purchaseUpdator;\n","import { GameState } from '../types';\n\nconst tickUpdator = (state: GameState) => ({\n  ...state,\n  power: state.power + (state.influxPerSecond * state.tickSpeed) / 1000,\n});\n\nexport default tickUpdator;\n","import purchaseUpdator from './stateUpdators/purchaseUpdator';\nimport tickUpdator from './stateUpdators/tickUpdator';\nimport { GameState, GameStateAction } from './types';\n\nconst reducer = (state: GameState, action: GameStateAction) => {\n  switch (action.type) {\n    case 'purchase':\n      if (!action.purchasable) {\n        throw new Error(\"expected purchasable for 'purchase' action type\");\n      }\n\n      return purchaseUpdator(state, action.purchasable);\n    case 'tick':\n      return tickUpdator(state);\n    default:\n      throw new Error('Unexpected action');\n  }\n};\n\nexport default reducer;\n","import React, { useReducer } from 'react';\nimport { useInterval } from 'beautiful-react-hooks';\nimport { GameState, GameStateAction } from './types';\nimport reducer from './reducer';\n\ntype GameStateResults = [GameState, React.Dispatch<GameStateAction>];\n\nconst useGameState = (initialGameState: GameState) => {\n  const [gameState, dispatch] = useReducer(reducer, initialGameState);\n\n  useInterval(() => {\n    dispatch({ type: 'tick' });\n  }, gameState.tickSpeed);\n\n  return [gameState, dispatch] as GameStateResults;\n};\n\nexport default useGameState;\n","import { PurchasableType } from './types';\n\nconst initialGameState = {\n  power: 5,\n  powerRebirthMultiplier: 1,\n  isGameOver: false,\n  rebirthCount: 0,\n  tickSpeed: 100,\n  influxPerSecond: 0,\n  purchasables: [\n    {\n      id: 'emerge',\n      type: PurchasableType.Oneshot,\n      name: 'Awaken',\n      description:\n        'Emerge from your unmarked grave and wreck your vengence upon the living.',\n      isUnlocked: true,\n      isPurchased: false,\n      quantity: 0,\n      outfluxPerSecond: 0,\n      ctaText: 'Emerge',\n      nextCost: 1,\n      baseCost: 1,\n      baseCostRebirthMultiplier: 1,\n      costCoefficient: 0,\n      baseProductivityPerSecond: 0,\n    },\n    {\n      id: 'zombie',\n      type: PurchasableType.Generator,\n      name: 'Zombie',\n      description: 'A speechless revenant.',\n      isUnlocked: false,\n      unlockConditions: {\n        purchasableId: 'emerge',\n        quantity: 1,\n      },\n      isPurchased: false,\n      quantity: 0,\n      outfluxPerSecond: 0,\n      ctaText: 'Raise a Zombie',\n      nextCost: 3,\n      baseCost: 3.738,\n      baseCostRebirthMultiplier: 1,\n      costCoefficient: 1.07,\n      baseProductivityPerSecond: 1.67,\n    },\n    {\n      id: 'library',\n      type: PurchasableType.Generator,\n      name: 'Evil Library',\n      description:\n        'Knowledge is dangerous. The people who control that knowledge are even more dangerous.',\n      isUnlocked: false,\n      unlockConditions: {\n        purchasableId: 'zombie',\n        quantity: 25,\n      },\n      isPurchased: false,\n      quantity: 0,\n      outfluxPerSecond: 0,\n      ctaText: 'Assemble a Library',\n      nextCost: 60,\n      baseCost: 60,\n      baseCostRebirthMultiplier: 1,\n      costCoefficient: 1.15,\n      baseProductivityPerSecond: 20,\n    },\n    {\n      id: 'dungeon',\n      type: PurchasableType.Generator,\n      name: 'Dungeons',\n      description: 'A quiet place to do dark business.',\n      isUnlocked: false,\n      unlockConditions: {\n        purchasableId: 'library',\n        quantity: 25,\n      },\n      isPurchased: false,\n      quantity: 0,\n      outfluxPerSecond: 0,\n      ctaText: 'Craft a Dungeon',\n      nextCost: 720,\n      baseCost: 720,\n      baseCostRebirthMultiplier: 1,\n      costCoefficient: 1.14,\n      baseProductivityPerSecond: 90,\n    },\n    {\n      id: 'city',\n      type: PurchasableType.Generator,\n      name: 'City of the Dead',\n      description: 'Where once was life and movement, all is dark and waiting.',\n      isUnlocked: false,\n      unlockConditions: {\n        purchasableId: 'dungeon',\n        quantity: 25,\n      },\n      isPurchased: false,\n      quantity: 0,\n      outfluxPerSecond: 0,\n      ctaText: 'Convert a city',\n      nextCost: 8640,\n      baseCost: 8640,\n      baseCostRebirthMultiplier: 1,\n      costCoefficient: 1.13,\n      baseProductivityPerSecond: 360,\n    },\n    {\n      id: 'army',\n      type: PurchasableType.Generator,\n      name: 'Armies of the Dead',\n      description: 'A wall of undead as far as the eye can see.',\n      isUnlocked: false,\n      unlockConditions: {\n        purchasableId: 'city',\n        quantity: 25,\n      },\n      isPurchased: false,\n      quantity: 0,\n      outfluxPerSecond: 0,\n      ctaText: 'Raise an Army',\n      nextCost: 103680,\n      baseCost: 103680,\n      baseCostRebirthMultiplier: 1,\n      costCoefficient: 1.12,\n      baseProductivityPerSecond: 2160,\n    },\n    {\n      id: 'rebirth',\n      type: PurchasableType.Oneshot,\n      name: 'Be Reborn',\n      description:\n        'Your vessel is wearing out. You can give up all your progress and transfer your consciousness to a new host for a ×2 multiplier bonus.',\n      isUnlocked: false,\n      unlockConditions: {\n        purchasableId: 'library',\n        quantity: 25,\n      },\n      isPurchased: false,\n      quantity: 0,\n      outfluxPerSecond: 0,\n      ctaText: 'Transfer Consciousness',\n      nextCost: 20000,\n      baseCost: 20000,\n      baseCostRebirthMultiplier: 5,\n      costCoefficient: 0,\n      baseProductivityPerSecond: 0,\n    },\n    {\n      id: 'end1',\n      type: PurchasableType.Oneshot,\n      name: 'Conquer World',\n      description: 'Eventually, all that is left is to snuff out the flame.',\n      isUnlocked: false,\n      unlockConditions: {\n        purchasableId: 'army',\n        quantity: 25,\n      },\n      isPurchased: false,\n      quantity: 0,\n      outfluxPerSecond: 0,\n      ctaText: 'Crush Everything',\n      nextCost: 100000000,\n      baseCost: 100000000,\n      baseCostRebirthMultiplier: 1,\n      costCoefficient: 0,\n      baseProductivityPerSecond: 0,\n    },\n    {\n      id: 'end2',\n      type: PurchasableType.Oneshot,\n      name: 'Still the Wind',\n      description:\n        'With the humans gone, it is time to bring upon the sky a great calm.',\n      isUnlocked: false,\n      unlockConditions: {\n        purchasableId: 'end1',\n        quantity: 1,\n      },\n      isPurchased: false,\n      quantity: 0,\n      outfluxPerSecond: 0,\n      ctaText: 'Rebuke the Wind',\n      nextCost: 0,\n      baseCost: 0,\n      baseCostRebirthMultiplier: 1,\n      costCoefficient: 0,\n      baseProductivityPerSecond: 0,\n    },\n    {\n      id: 'end3',\n      type: PurchasableType.Oneshot,\n      name: 'Dry the Oceans',\n      description:\n        'And as the sky stills, it is time for the sea creatures and the crashing of the waves to cease.',\n      isUnlocked: false,\n      unlockConditions: {\n        purchasableId: 'end2',\n        quantity: 1,\n      },\n      isPurchased: false,\n      quantity: 0,\n      outfluxPerSecond: 0,\n      ctaText: 'Rebuke the Oceans',\n      nextCost: 0,\n      baseCost: 0,\n      baseCostRebirthMultiplier: 1,\n      costCoefficient: 0,\n      baseProductivityPerSecond: 0,\n    },\n    {\n      id: 'end4',\n      type: PurchasableType.Oneshot,\n      name: 'Reduce the Land to Ash',\n      description:\n        'And as the oceans lie empty and cratered, it is time for the infinite forms of life to quiet and still.',\n      isUnlocked: false,\n      unlockConditions: {\n        purchasableId: 'end3',\n        quantity: 1,\n      },\n      isPurchased: false,\n      quantity: 0,\n      outfluxPerSecond: 0,\n      ctaText: 'Rebuke the Land',\n      nextCost: 0,\n      baseCost: 0,\n      baseCostRebirthMultiplier: 1,\n      costCoefficient: 0,\n      baseProductivityPerSecond: 0,\n    },\n    {\n      id: 'end5',\n      type: PurchasableType.Oneshot,\n      name: 'Extinguish the Light',\n      description:\n        'And with everything a cold husk, finally, let there be darkness.',\n      isUnlocked: false,\n      unlockConditions: {\n        purchasableId: 'end4',\n        quantity: 1,\n      },\n      isPurchased: false,\n      quantity: 0,\n      outfluxPerSecond: 0,\n      ctaText: 'Rebuke the Light',\n      nextCost: 0,\n      baseCost: 0,\n      baseCostRebirthMultiplier: 1,\n      costCoefficient: 0,\n      baseProductivityPerSecond: 0,\n    },\n    {\n      id: 'end6',\n      type: PurchasableType.Oneshot,\n      name: 'The End',\n      description:\n        'And in the cold silence of the void, the great work has come to an end.',\n      isUnlocked: false,\n      unlockConditions: {\n        purchasableId: 'end5',\n        quantity: 1,\n      },\n      isPurchased: false,\n      quantity: 0,\n      outfluxPerSecond: 0,\n      isPurchasable: false,\n      hidePurchaseButton: true,\n      ctaText: '',\n      nextCost: 0,\n      baseCost: 0,\n      baseCostRebirthMultiplier: 1,\n      costCoefficient: 0,\n      baseProductivityPerSecond: 0,\n    },\n  ],\n};\n\nexport default initialGameState;\n","import React from 'react';\nimport './App.css';\nimport Container from 'react-bootstrap/esm/Container';\nimport Jumbotron from 'react-bootstrap/esm/Jumbotron';\nimport Navbar from 'react-bootstrap/esm/Navbar';\nimport CardColumns from 'react-bootstrap/esm/CardColumns';\nimport PurchasableCard from './PurchasableCard';\nimport useGameState from './gameState/useGameState';\nimport { Purchasable } from './gameState/types';\nimport initialGameState from './gameState/initialGameState';\n\nconst App: React.FunctionComponent = () => {\n  const [gameState, dispatch] = useGameState(initialGameState);\n\n  const onPurchase = (purchasable: Purchasable) => {\n    dispatch({ type: 'purchase', purchasable });\n  };\n\n  const unlockedPurchasables = gameState.purchasables.filter(\n    (purchasable) => purchasable.isUnlocked\n  );\n\n  return (\n    <Container className=\"p-3\">\n      <Jumbotron>\n        <h1 className=\"header\">Infinitely Worse - A Necromantic Adventure</h1>\n      </Jumbotron>\n      {gameState.isGameOver === false && (\n        <Navbar variant=\"dark\" bg=\"info\" sticky=\"top\">\n          <Navbar.Text className=\"pr-4\">\n            <span className=\"text-uppercase font-weight-bold\">Power:</span> ♅\n            {Math.floor(gameState.power)}\n          </Navbar.Text>\n          {gameState.influxPerSecond > 0 && (\n            <Navbar.Text className=\"pr-4\">\n              <span className=\"text-uppercase font-weight-bold\">Influx:</span>{' '}\n              ♅+\n              {Math.floor(gameState.influxPerSecond)}/s\n            </Navbar.Text>\n          )}\n          {gameState.powerRebirthMultiplier > 1 && (\n            <Navbar.Text>\n              <span className=\"text-uppercase font-weight-bold\">\n                Multiplier:\n              </span>{' '}\n              ×{gameState.powerRebirthMultiplier}\n            </Navbar.Text>\n          )}\n        </Navbar>\n      )}\n      <CardColumns className=\"mt-4\">\n        {unlockedPurchasables.map((purchasable) => (\n          <PurchasableCard\n            purchasable={purchasable}\n            key={purchasable.id}\n            onPurchase={onPurchase}\n            disableButton={purchasable.nextCost > gameState.power}\n          />\n        ))}\n      </CardColumns>\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Helmet from 'react-helmet';\nimport './index.css';\nimport 'bootswatch/dist/cyborg/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Helmet>\n      <meta charSet=\"utf-8\" />\n      <title>Infinitely Worse</title>\n      <link\n        rel=\"canonical\"\n        href=\"https://mikelovesrobots.github.io/incremental-ld48/\"\n      />\n    </Helmet>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}